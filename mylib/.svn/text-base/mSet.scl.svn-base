package rite.main


import scala.collection.mutable
import scala.collection.immutable.Queue

package mylib {
	
	class mSet[T] {
		
		private[this] val content = mutable.Set.empty[T]
		
		private[this] val ques = mutable.Map.empty[AnyRef, Queue[T]]
		
		def add(x: T) {
			if (content.add(x)) {
				for ((k, que) <- ques) {
					ques(k) = que.enqueue(x)
				}
			}
		}
		
		def remove(x: T) {
			content.remove(x)
		}
		
		def foreach(f: (T) => Unit) {
			val marker = new AnyRef
			ques(marker) = Queue[T]().enqueue(content.toList)
			
			while (!ques(marker).isEmpty) {
				val (t, q) = ques(marker).dequeue
				ques(marker) = q
				if (content.contains(t)) {
					f(t)
				}
			}
			ques.remove(marker)
		}
		
		def onceAndClear(f: (T) => Unit) {
			val todo = content.toList
			content.clear()
			todo.foreach(f(_))
		}
		
		def isEmpty = content.isEmpty
		
		def clear() { content.clear() }
		
		def contains(x: T) = content.contains(x)
		
		def size = content.size
	}
}
