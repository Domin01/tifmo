package rite.main


import scala.collection.mutable

package mylib {

	object listPartitions {
		
		def apply[T](set: Set[T], subsets: Iterable[Set[T]]) = {
			
			val memo = mutable.Map.empty[(Set[T], Iterable[Set[T]]), List[List[Set[T]]]]
			
			def recurse(a: Set[T], ss: Iterable[Set[T]]): List[List[Set[T]]] = {
				if (memo.contains((a, ss))) {
					memo((a, ss))
				} else {
					var ret = Nil:List[List[Set[T]]]
					var cc = ss
					while(!cc.isEmpty) {
						if (cc.head == a) {
							ret = List(cc.head) :: ret
						} else if (cc.head.subsetOf(a)) {
							recurse(a -- cc.head, cc.tail).foreach((x: List[Set[T]]) => ret = (cc.head :: x) :: ret)
						}
						cc = cc.tail
					}
					memo((a, ss)) = ret
					ret
				}
			}
			
			recurse(set, subsets)
		}
	}
}
