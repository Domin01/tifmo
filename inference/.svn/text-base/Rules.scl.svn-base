package rite.main


import model.SemRole

package inference {

	object Rules {
		
		def DI(term: IETerm, b: IETerm, a: IETerm, r: SemRole) {
			
			val ie = term.engine
			
			val rrs = b.roles - r
			val rr = if (rrs.size == 1) rrs.head else null
			
			val pib = ie.getPI(b, rrs)
			term.subsume(pib)
			
			val twb = ie.getIN(Set(ie.getCP(Set((term, rr), (ie.W, r))), b))
			val cp = ie.getCP(Set((term, rr), (a, r)))
			cp.subsume(twb)
			
			val tmref = term.ref
			val bref = b.ref
			val aref = a.ref
			
			pib.forSpecific(y => y.foreachSub(Set.empty[IETerm], z => if (!z.aux) {
				ie.constructCP(Set((z, rr), (ie.W, r)), Set.empty[IETerm], x => {
					ie.constructIN(Set(x, bref.to), Set.empty[IETerm], x => {
						x.forSpecific(w => w.foreachSub(Set(y, z), x => {
							x.asforCP(Set(w, y, z), of => {
								val fil = of.filter(_._2 == r)
								if (!fil.isEmpty) {
									fil.head._1.foreachSub(of.map(_._1), x => {
										if (x == aref.to) {
											ie.constructCP(of -- fil, Set.empty[IETerm], x => {
												ie.addTask(new SubsumeDo(x, tmref.to))
											})
										}
									})
								}
							})
						}))
					})
				})
			}))
		}
		
		def DE(term: IETerm, b: IETerm, a: IETerm, r: SemRole) {
			
			val ie = term.engine
			
			val rrs = b.roles - r
			val rr = if (rrs.size == 1) rrs.head else null
			
			val pib = ie.getPI(b, rrs)
			term.subsume(pib)
			
			val twb = ie.getIN(Set(ie.getCP(Set((term, rr), (ie.W, r))), b))
			val cp = ie.getCP(Set((term, rr), (a, r)))
			cp.subsume(twb)
			twb.subsume(cp)
			
			val tmref = term.ref
			val bref = b.ref
			val aref = a.ref
			
			pib.forSpecific(y => y.foreachSub(Set.empty[IETerm], z => if (!z.aux) {
				ie.constructCP(Set((z, rr), (ie.W, r)), Set.empty[IETerm], x => {
					ie.constructIN(Set(x, bref.to), Set.empty[IETerm], x => {
						x.forSpecific(_.asforCP(Set(y, z), of => {
							if (of.contains((aref.to, r))) {
								ie.constructCP(of - ((aref.to, r)), Set.empty[IETerm], x => {
									ie.addTask(new SubsumeDo(x, tmref.to))
								})
							}
						}))
					})
				})
			}))
		}
	}
}
