package rite.main


import scala.collection.mutable
import model.SemRole

package inference {
	
	class RoleMgr {
		
		val ie = new InferenceEngine
		
		private[this] val rolemap = mutable.Map.empty[String, Set[SemRole]]
		
		def getRole(word: String) = rolemap(word)
		
		def addRoles(word: String, rs: Set[SemRole]) {
			if (rolemap.contains(word)) {
				rolemap(word) = rolemap(word) ++ rs
			} else {
				rolemap(word) = rs
			}
			//if (!(rs -- Set(SemRole.Argument, SemRole.R1, SemRole.R2)).isEmpty) {
			//	rolemap(word) = rolemap(word) + SemRole.Time
			//}
		}
		
		
		private[this] val tmrefmap = mutable.Map.empty[(String, Boolean), IETermRef]
		
		def getTermRef(word: String, sign: Boolean) = {
			if (tmrefmap.contains((word, sign))) {
				tmrefmap((word, sign))
			} else {
				val prers = getRole(word)
				val rs = if (prers.size <= 1) null else prers
				val ret = ie.newTerm(rs, if (sign) word else "!" + word).ref
				tmrefmap((word, sign)) = ret
				ret
			}
		}
		
		
		private[this] val paramap = mutable.Map.empty[String, IR]
		
		def getPara(para: String) = if (paramap.contains(para)) paramap(para) else null
		
		def setPara(para: String, term: IR) {
			paramap(para) = term
		}
		
		def activate(term: Term) {
			term.register(Set.empty[SemRole], this)
		}
	}
}
