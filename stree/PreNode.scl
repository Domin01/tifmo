package tifmo

import knowledge.SemRole.SemRole
import knowledge.WordInfo
import stree.Qtfier.Qtfier
import inference.Slction
import scala.collection.mutable
import scala.util.Sorting

package stree {
	
	class PreNode {
		
		var word = null:WordInfo
		
		var coref = null:String
		
		var outr = null:SemRole
		
		var qtfier = null:Qtfier
		
		var sel = Set.empty[Slction]
		
		var rootNeg = false
		
		var updateCoref = false
		
		private var prt = null:PreNode
		private[this] var children = mutable.Map.empty[(SemRole, PreNode), Int]
		
		def parent = prt
		
		def addChild(irole: SemRole, child: PreNode, index: Int) {
			child.prt = this
			children((irole, child)) = index
		}
		
		def deleteChild(irole: SemRole, child: PreNode) {
			child.prt = null
			children.remove((irole, child))
		}
		
		def sortedChildren = {
			Sorting.stableSort[(SemRole, PreNode), Int](children.keys.toList, -children(_))
		}
		
		
		private[stree] var correspondingSTreeNode = null:STreeNode
		
		override def toString = word.toString
	}
}
