package tifmo

import inference.IETerm
import inference.IEngine
import inference.Relation
import inference.RuleFunc
import inference.FuncArg
import inference.FAConversion._
import inference.IEPredSubsume
import inference.IEPredRL

package stree {
	
	case class SelSup(sup: String) extends Slction {
		
		def applyRL(ie: IEngine, a: IETerm, b: IETerm) {
			ie.claimSingle(a)
			ie.foreachSuperset(b, List(a, this), rSelSup2)
		}
	}
	
	private[stree] object rSelSup0 extends RuleFunc[IEPredSubsume] {
		def apply(ie: IEngine, pred: IEPredSubsume, args: List[FuncArg]) {
			args match {
				case FuncArg(a:IETerm) :: Nil => {
					ie.claimSubsume(pred.subset, a)
					ie.claimSubsume(a, pred.subset)
				}
				case _ => throw new Exception("rSelSup0 error!")
			}
		}
	}
	
	private[stree] object rSelSup1 extends RuleFunc[IEPredRL] {
		def apply(ie: IEngine, pred: IEPredRL, args: List[FuncArg]) {
			args match {
				case FuncArg(a:IETerm) :: FuncArg(rl:Relation) :: FuncArg(b:IETerm) :: Nil => {
					if (pred.rl == rl) {
						ie.ifSubsume(pred.a, b, List(a), rSelSup0)
					}
				}
				case _ => throw new Exception("rSelSup1 error!")
			}
		}
	}
	
	private[stree] object rSelSup2 extends RuleFunc[IEPredSubsume] {
		def apply(ie: IEngine, pred: IEPredSubsume, args: List[FuncArg]) {
			args match {
				case FuncArg(a:IETerm) :: FuncArg(rl:Relation) :: Nil => {
					ie.foreachXRLB(pred.superset, List(a, rl, pred.subset), rSelSup1)
				}
				case _ => throw new Exception("rSelSup2 error!")
			}
		}
	}
	
}
