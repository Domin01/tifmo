package tifmo

import edu.mit.jwi.Dictionary
import edu.mit.jwi.item.POS
import edu.mit.jwi.item.Pointer
import edu.mit.jwi.item.IWordID
import edu.mit.jwi.item.IWord
import edu.mit.jwi.item.ISynsetID
import edu.mit.jwi.item.ISynset
import edu.mit.jwi.morph.WordnetStemmer

import scala.collection.JavaConversions._

package resource {
	
	object WordNet {
		
		//private[this] val dir = "/usr/share/wordnet"
		private[this] val dir = "/works/csisv13/tianran/wordnet"
		
		private[this] val dict = new Dictionary(new java.io.File(dir))
		dict.open()
		
		private[this] val stemmer = new WordnetStemmer(dict)
		private[this] val allpos = POS.values.toSet
		
		def hasWord(s: String) = {
			allpos.exists(x => stemmer.findStems(s, x).exists(y => dict.getIndexWord(y, x) != null))
		}
		
		
		def synsets(lex: String, postag: String) = {
			
			val stems = if (postag.length >= 2) {
				postag.substring(0, 2) match {
					case "JJ" => stemmer.findStems(lex, POS.ADJECTIVE).map((POS.ADJECTIVE, _)).toSet
					case "NN" => stemmer.findStems(lex, POS.NOUN).map((POS.NOUN, _)).toSet
					case "RB" => stemmer.findStems(lex, POS.ADVERB).map((POS.ADVERB, _)).toSet
					case "VB" => stemmer.findStems(lex, POS.VERB).map((POS.VERB, _)).toSet
					case _ => allpos.flatMap(x => stemmer.findStems(lex, x).map((x, _)))
				}
			} else {
				allpos.flatMap(x => stemmer.findStems(lex, x).map((x, _)))
			}
			
			for ((p, s) <- stems; idxw = dict.getIndexWord(s, p); if idxw != null; wid <- idxw.getWordIDs) yield {
				dict.getWord(wid).getSynset
			}
		}
		
		def getAntonymSynsets(ss: ISynset) = {
			val ws = ss.getWords.toSet
			val antws = ws.flatMap(_.getRelatedWords(Pointer.ANTONYM))
			antws.map(x => dict.getWord(x).getSynset)
		}
		
		private[this] val hyperrels = Set(Pointer.HYPERNYM, Pointer.HYPERNYM_INSTANCE, 
			Pointer.HOLONYM_MEMBER, Pointer.HOLONYM_PART, Pointer.HOLONYM_SUBSTANCE, Pointer.ENTAILMENT)
		def getHyperSynsets(ss: ISynset) = {
			val hss = hyperrels.flatMap(ss.getRelatedSynsets(_))
			hss.map(dict.getSynset(_)) + ss
		}
		
	}
}
